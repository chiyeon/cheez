body {
   background-color: #272827;
}

p, a, button, ul, li, h1, h2, h3, input {
   font-family: Helvetica, sans-serif;
}

#loading-hint {
   position: absolute;
   z-index: 999;
   left: 0;
   top: 0;
   width: 100vw;
   height: 100vh;
   overflow: hidden;
   background-color: #0f0f0fa8;

   display: flex;
   justify-content: center;
   align-items: center;

   transition: 1s opacity;
}

#loading-hint p {
   font-size: 2em;
   color: white;
}

#loading-hint.hidden {
   opacity: 0;
   pointer-events: none;
}

main {
   max-width: 800px;
   margin: auto;
}

button, select, input {
   border: none;
   background-color: #6b8263;
   color: white;
   border-radius: 4px;
   font-size: 1em;
   padding: 0.5em;
   cursor: pointer;
}

input {
   background-color: #f1eddc;
   color: #6b8263;
}

button:hover, select:hover {
   background-color: #414e3d;
}

.board {
   margin-top: 4em;
   margin-bottom: 1em;
   width: 100%;
   height: auto;
   aspect-ratio: 1;

   display: grid;
   grid-template-rows: repeat(8, 1fr);
   
   border-radius: 4px;

   overflow: hidden;
}

.board .row {
   width: 100%;

   display: grid;
   grid-template-columns: repeat(8, 1fr);
}

.board .row .square {
   display: flex;
   justify-content: center;
   align-items: center;
   position: relative;
}

.board .row .square.white {
   background-color: #f1eddc;
}

.board .row .square.black {
   background-color: #6b8263;
}

.board .row .square.last-move::after {
   position: absolute;
   width: 100% !important;
   height: 100% !important;
   content: "";
   opacity: 40% !important;
   background-color: #ffe640 !important;
   border-radius: 0 !important;
}

.board .row .possible-move {
   position: relative;
}
.board .row .possible-move::after {
   position: absolute;
   content: "";
   border-radius: 999px;
   left: 50%;
   top: 50%;
   transform: translate(-50%, -50%);
   width: 30%;
   height: 30%;
   background-color: black;
   opacity: 0.5;
}

.board .row .possible-move:not(:empty) {
   background-color: rgb(188, 75, 75);
   /* width: 100%; do ::after for this if you want to have the red square overlap instead of replace target square
   height: 100%;
   border-radius: 0; */
}

/* @supports selector(:has(*)) {
   .board .row .possible-move:has(.piece) {
      background-color: rgb(147, 67, 67);
   }
   .board .row .possible-move .piece::before {
      display: none;
   }
} */

.board .row .square .piece {
   width: 80%;
   height: 80%;
   z-index: 2;

   background-size: contain;
   background-position: center;
   background-repeat: no-repeat;

   filter: drop-shadow(2px 4px 2px #00000040);
}

.options {
   display: flex;
   gap: 10px;
}